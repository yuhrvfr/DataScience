modcom
predDFte <- data.frame(predrfte,predgbmte,predldate,wage=testing$diagnosis)
nrow(predDFte)
predcomte <- predict(modcom,predDFte)
predcomte
rm(predDFte)
predcomte <- predict(modcom,predDFte)
predDFte <- data.frame(predrfte,predgbmte,predldate,wage=testing$diagnosis)
predcomte <- predict(modcom,predDFte)
modcom
predDF <- data.frame(predrftr,predgbmtr,predldatr,wage=training$diagnosis)
modcom <- gam(wage~.,data=predDF)
modcom <- gam(wage~.,predDF)
modcom <- gam(wage~.,data=predDF)
modcom <- gam(wage~.,data=predDF.data)
modcom <- gam(wage~.,data=predDF)
head(modcom <- gam(predDF)
)
head(predDF)
modcom <- gam(wage~predrftr+predgbmtr+predldatr,data=predDF)
modcom <- gam(wage~predrftr+predgbmtr+predldatr,data=predDF)
modcom
modcom <- train(wage~.,method="gam",data=predDF)
predcomte <- predict(modcom,predDFte)
predcomte
predcomte[1:82]
predcomte82 <- predcomte[1:82]
length(predcomte82)
confusionMatrix(table(predcomte82,testing$diagnosis))
modcom <- train(wage~.,method="gam",data=predDF, list=F)
modcom
modcomte <- train(wage~.,method="gam",data=predDFte)
predcomte <- predict(modcomte,predDFte)
confusionMatrix(table(predcomte,testing$diagnosis))
predDF <- data.frame(predrftr,predgbmtr,predldatr,wage=training$diagnosis)
modcom <- train(wage~.,method="gam",data=predDF, list=F)
predcomte <- predict(modcom,predDFte)
predcomte
table(predcomte,testing$diagnosis)
sqrt(sum(predDFte-testing$diagnosis)^2)
sqrt(sum(predDFte-testing$diagnosis)^2)
confusionMatrix(table(predcomte[1:82],testing$diagnosis))
predcomte <- predict(modcom,predDFte)
confusionMatrix(table(predcomte[1:82],testing$diagnosis))
modcomrf <- randomForest(wage~.,method="rf",data=predDF)
modcomrf
predDFte <- data.frame(predrfte,predgbmte,predldate)
predcomte <- predict(modcomrf,predDFte)
predcomte
modcomrf <- randomForest(wage~.,data=predDF)
predDFte <- data.frame(predrfte,predgbmte,predldate)
modcomrf
predcomte <- predict(modcomrf,predDFte)
modcomrf <- randomForest(diagnosis~.,data=predDF)
modcomrf <- randomForest(diagnosis~.,data=predDF)
head(predDF)
predDF <- data.frame(predrftr,predgbmtr,predldatr,diagnosis=training$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
predDFte <- data.frame(predrfte,predgbmte,predldate)
predcomte <- predict(modcomrf,predDFte)
predcomte
fit1 <- train(diagnosis ~ ., data = training, method = "rf", trControl = trainControl(number = 4))
fit2 <- train(diagnosis ~ ., data = training, method = "gbm")
fit3 <- train(diagnosis ~ ., data = training, method = "lda")
predcomte <- predict(modcomrf,newdata=predDFte)
predict1 <- predict(fit1, newdata = testing)
predict2 <- predict(fit2, newdata = testing)
predict3 <- predict(fit3, newdata = testing)
DF_combined <- data.frame(predict1, predict2, predict3, diagnosis = testing$diagnosis) # training$diagnosis?
fit_combined <- train(diagnosis ~ ., data = DF_combined, method = "rf")
predict4 <- predict(fit_combined, newdata = testing)
predcomte <- predict(modcomrf,testing)
predDFte <- data.frame(predrfte,predgbmte,predldate,diagnosistesting$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
predDFte <- data.frame(predrfte,predgbmte,predldate,diagnosis=testing$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
predcomte <- predict(modcomrf,testing)
confusionMatrix(predict4, testing$diagnosis)
confusionMatrix(predict1, testing$diagnosis)
library(MASS)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
-- fit model on training
modrf <- randomForest(diagnosis~.,data=training)
modgbm <- train(diagnosis~.,method="gbm",data=training)
modlda <- train(diagnosis~.,method="lda",data=training)
predrf  <- predict(modrf,testing)
predgbm <- predict(modgbm,testing)
predlda <- predict(modlda,testing)
predDF <- data.frame(predrf,predgbm,predlda,diagnosis=testing$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
predcomte <- predict(modcomrf,testing)
confusionMatrix(table(predrf,testing$diagnosis))
confusionMatrix(table(predgbm,testing$diagnosis))
confusionMatrix(table(predlda,testing$diagnosis))
confusionMatrix(table(predcomte,testing$diagnosis))
modcomrf <- randomForest(diagnosis~.,data=testing)
predcomte <- predict(modcomrf,testing)
confusionMatrix(table(predcomte,testing$diagnosis))
modcomrf <- randomForest(diagnosis~.,data=predDF)
confusionMatrix(table(predcomte,testing$diagnosis))
confusionMatrix(predict1, testing$diagnosis)
confusionMatrix(predict2, testing$diagnosis)
confusionMatrix(predict3, testing$diagnosis)
confusionMatrix(predict4, testing$diagnosis)
library(MASS)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
## fit model on training
modrf <- randomForest(diagnosis~.,data=training)
modgbm <- train(diagnosis~.,method="gbm",data=training)
modlda <- train(diagnosis~.,method="lda",data=training)
## Predict on testing using the 4 models:rf,gbm,lda,com
predrf  <- predict(modrf,testing)
predgbm <- predict(modgbm,testing)
predlda <- predict(modlda,testing)
## fit the combined model
predDF <- data.frame(predrf,predgbm,predlda,diagnosis=testing$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
## Predict on combined model on test
predcomte <- predict(modcomrf,testing)
confusionMatrix(table(predrf,testing$diagnosis))$accuracy
confusionMatrix(table(predrf,testing$diagnosis))
confusionMatrix(table(predrf,testing$diagnosis))$Accuracy
confusionMatrix(table(predrf,testing$diagnosis))
confusionMatrix(table(predcomte,testing$diagnosis))
library(MASS)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
inbuild <- createDataPartition(training$diagnosis,p=.75,list=F)
validating <- adData[-inbuild,]
training <- adData[inbuild,]
dim(training)
dim(testing)
dim(validating)
## fit model on training
modrf <- randomForest(diagnosis~.,data=training)
modgbm <- train(diagnosis~.,method="gbm",data=training)
modlda <- train(diagnosis~.,method="lda",data=training)
## Predict on testing using the 4 models:rf,gbm,lda,com
predrf  <- predict(modrf,testing)
predgbm <- predict(modgbm,testing)
predlda <- predict(modlda,testing)
## fit the combined model
predDF <- data.frame(predrf,predgbm,predlda,diagnosis=testing$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
## Predict on combined model on validating
predrfva  <- predict(modrf,validating)
predgbmva <- predict(modgbm,validating)
predldava <- predict(modlda,validating)
## Predict on combined model on validating
predDFva <- data.frame(predrf=predrfva,predgbm=predgbmva,predlda=predldava,diagnosis=validating$diagnosis)
predcomva <- predict(modcomrf,predDFva)
confusionMatrix(table(predrf,validating$diagnosis))
confusionMatrix(table(predrfva,validating$diagnosis))
confusionMatrix(table(predgbmva,validating$diagnosis))
confusionMatrix(table(predldava,validating$diagnosis))
confusionMatrix(table(predcomva,validating$diagnosis))
library(MASS)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
## fit model on training
modrf <- randomForest(diagnosis~.,data=training)
modgbm <- train(diagnosis~.,method="gbm",data=training)
modlda <- train(diagnosis~.,method="lda",data=training)
## Predict on testing using the 4 models:rf,gbm,lda,com
predrf  <- predict(modrf,training)
predgbm <- predict(modgbm,training)
predlda <- predict(modlda,training)
## fit the combined model
predDF <- data.frame(predrf,predgbm,predlda,diagnosis=training$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
## Predict on combined model on testing
predrfte  <- predict(modrf,testing)
predgbmte <- predict(modgbm,testing)
predldate <- predict(modlda,testing)
## Predict on combined model on testing
predDFte <- data.frame(predrf=predrfte,predgbm=predgbmte,predlda=predldate,diagnosis=testing$diagnosis)
predcomte <- predict(modcomrf,predDFte)
confusionMatrix(table(predrfte,testing$diagnosis))
confusionMatrix(table(predgbmte,testing$diagnosis))
confusionMatrix(table(predldate,testing$diagnosis))
confusionMatrix(table(predcomte,testing$diagnosis))
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
library(MASS)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
## fit model on training
modrf <- randomForest(diagnosis~.,data=training)
modgbm <- train(diagnosis~.,method="gbm",data=training)
modlda <- train(diagnosis~.,method="lda",data=training)
## Predict on testing using the 4 models:rf,gbm,lda,com
predrf  <- predict(modrf,testing)
predgbm <- predict(modgbm,testing)
predlda <- predict(modlda,testing)
## fit the combined model
predDF <- data.frame(predrf,predgbm,predlda,diagnosis=testing$diagnosis)
modcomrf <- randomForest(diagnosis~.,data=predDF)
## Predict on combined model on testing
predcomte <- predict(modcomrf,testing)
c1 <- confusionMatrix(table(predrfte,testing$diagnosis))
c2 <- confusionMatrix(table(predgbmte,testing$diagnosis))
c3 <- confusionMatrix(table(predldate,testing$diagnosis))
c4 <- confusionMatrix(table(predcomte,testing$diagnosis))
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
# confusion matrixes
c1 <- confusionMatrix(predict1, testing$diagnosis)
c2 <- confusionMatrix(predict2, testing$diagnosis)
c3 <- confusionMatrix(predict3, testing$diagnosis)
c4 <- confusionMatrix(predict4, testing$diagnosis)
print(paste(c1$overall[1], c2$overall[1], c3$overall[1], c4$overall[1]))
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(3523)
library(AppliedPredictiveModeling)
library(caret)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
sapply(training,class)
set.seed(233)
modlas <- train(CompressiveStrength~.,method="lasso",data=training)
modlas
?plot.enet
modlas$finalModel
object <- modlas$finalModel
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
object <- modlas
par(mfrow=c(1,1))
plot(object)
plot(object,xvar="step")
plot(object,xvar="step")
plot(object)
object <- modlas$finalModel
par(mfrow=c(2,2))
plot(object)
plot(object,xvar="step")
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
package(e1071)
install.packages("e1071")
set.seed(325)
library(e1072)
mod <- train(CompressiveStrength~.,method="e1072",data=training)
set.seed(325)
library(e1071)
mod <- train(CompressiveStrength~.,method="e1071",data=training)
e1071
?e1071
mod <- svm(CompressiveStrength~., data = trainsing)
mod <- svm(CompressiveStrength~., data = training)
pred <- predict(mod, testing)
ped
pred
sqrt(sum((pred-testing$CompressiveStrength)^2))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
library(caret)
modrf <- train(y~.,method="rf", data=vowel.train)
modgbm <- train(y~.,method="gbm", data=vowel.train)
predrf <- predict(modrf,vowel.test)
predgbm <- predict(modgbm,vowel.test)
conf <- table(predrf,vowel.test$y)
confusionMatrix(conf)
confg <- table(predgbm,vowel.test$y)
confusionMatrix(confg)
confrg <- table(predrf,predgbm)
confusionMatrix(confrg)
install.packages("rtools")
library(rtools)
library(rtools)
install.packages("devtools ")
install.packages("devtools")
library(rtools)
library(rCharts)
install_github("ramnathv/rCharts@dev")
library(devtools)
install_github("ramnathv/rCharts@dev")
ability.cov
mtcars
scatterplot(mpg ~ wt | cyl, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
plot(mpg ~ wt | cyl, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
library(ggplot2)
scatterplot(mpg ~ wt | cyl, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
library(car)
scatterplot(mpg ~ wt | cyl, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
library(car)
scatterplot(wt~qsec | mpg, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
library(rgl)
install.packages("rgl")
library(rgl)
plot3d(mtcars$wt, mtcars$qsec, mtcars$mpg)
scatterplot(mpg~qsec, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~qsec, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
plot(mpg~qsec, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~qsec, data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
plot(mpg~wt |qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
plot(mpg~wt |qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~wt|qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~wt|qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~wt , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot")
scatterplot(mpg~wt , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot")
scatterplot(mpg~wt , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~wt , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
library(car)
scatterplot(mpg~wt , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
scatterplot(mpg~qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
fit <- lm(mpg~factor(am)+wt+hp+cyl+disp+drat+qsec+carb+vs)
sfit <- step(fit,trace=0)
e <- data.frame(1,2,10)
e
predict(sfit,e)
predict(e,sfit)
predict(sfit,e)
sfit
e <- data.frame(am=1,wt=2,qsec=10)
e
predict(sfit,e)
p <- predict(sfit,e)
p
points(10, 16.98, type = "p")
points(10, 16.98, type = "p", col="black")
points(10, 16.98, type = "p", col="black", cex=5)
points(10, 16.98, type = "p", col="black", pch=5)
plot(mpg~qsec , data=mtcars, col="blue",type="p", pch=20, cex=.5)
points(10, 16.98, col="blue", pch=22)
points(10, jitter(16.98), col="blue", pch=22)
points(10, jitter(16.98), col="red", pch=22)
plot(qsec,mpg , data=mtcars, col="blue",type="p", pch=20, cex=.5)
points(10, jitter(16.98), col="red", pch=22)
plot(mtcars$qsec,mtcars$mpg , col="blue",type="p", pch=20, cex=.5)
points(10, jitter(16.98), col="red", pch=22)
points(15, jitter(16.98), col="red", pch=22)
scatterplot(mpg~qsec , data=mtcars,
xlab="Weight of Car", ylab="Miles Per Gallon",
main="Enhanced Scatter Plot",
labels=row.names(mtcars))
points(15, jitter(16.98), col="red", pch=22)
points(15, jitter(16.98), col="darkblue", pch=22)
points(15, jitter(16.98), col="darkblue", pch=30, cex=50)
points(15, jitter(16.98), col="darkblue", pch=30, cex=5)
points(15, jitter(16.98), col="darkblue", pch=3, cex=5)
points(15, jitter(16.98), col="darkblue", pch=19, cex=5)
points(15, jitter(16.98), col="darkblue", pch=16)
points(15, jitter(16.98), col="darkblue", pch=16)
library(ggplot2)
ggplot(mtcars, aes(x=wt,y=mpg))
+ geom_line()
library(ggplot2)
qplot(mpg~wt,data=mtcars,geom=c("point","smooth"),method="lm")
library(ggplot2)
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"),method="lm")
library(ggplot2)
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"),method="lm",
xlab="Weight of Car", ylab="Miles Per Gallon")
library(ggplot2)
qplot(wt,mpg,data=mtcars,geom=c("point","smooth"),method="lm",
xlab="Weight of Car", ylab="Miles Per Gallon")
points(15, jitter(16.98), col="darkblue", pch=16)
points(15, jitter(16.98), col="darkblue", pch=16)
ggplot(mtcars$wt,mtcars$mpg,geom=c("point","smooth"))
ggplot(data.frame(mtcars$wt,mtcars$mpg),geom=c("point","smooth"))
ggplot(data.frame(mtcars$wt,mtcars$mpg),geom=c("point","smooth"))
+ geom_line()
+ geom_point()
ggplot(data.frame(mtcars$wt,mtcars$mpg),geom=c("point","smooth"))
+ geom_line()
ggplot(data.frame(mtcars$wt,mtcars$mpg),geom=c("point","smooth"))
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg),geom=c("point","smooth"))
d <- d + geom_line()
d
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg))
d <- d + geom_line()
d
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg),aes=c("weigth","mpg"))
d <- d + geom_line()
d
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg),aes=c(x="weigth",y="mpg"))
d <- d + geom_line()
d
print(d)
env
env()
library(ggplot2)
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg),aes=c(x="weigth",y="mpg"))
d <- d + geom_line()
d
d <- ggplot(data.frame(mtcars$wt,mtcars$mpg),aes=c(x="weigth",y="mpg"))
d <- d + geom_point()
d
library(yhatr)
df <- data.frame(lat=37.5542, lon=-122.3131, radius = 40)
yhat.config <- c(username="yuhrvfr@gmail.com",
apikey = "c193fc9178f1099ea59fdb88c7e27f70",
env ="http://cloud.yhathq.com/")
yhat.predict("pollutant",df)
q()
setwd("C:/Coursera/DataScience/DataProduct/proj/documentation/doc_slidify")
